#!/usr/bin/perl

=head1 NAME

ENA_sample_mapping.pl - The sample names in ENA are ambiguous. Create new file with unambiguous annotations

=cut

use strict;
use warnings;

use Getopt::Long qw(:config auto_version);
use Pod::Usage;
use File::Basename;
use IO::Uncompress::Gunzip qw(gunzip $GunzipError);

my $path = '/cluster/gjb_lab/cdr/GRNAseq/raw/raw_reads';
my $ENAUrl = 'www.ebi.ac.uk/ena/data/warehouse/filereport?accession=ERP004763&result=read_run&fields=run_accession,submitted_ftp&download=txt';
my $out = 'sample_mapping.tsv';
my $VERBOSE = 1;
my $DEBUG = 0;
my $help;
my $man;
our $VERSION = '0.3';

GetOptions (
   'in=s'      => \$path,
   'url=s'     => \$ENAUrl,
   'out=s'     => \$out,
   'verbose!'  => \$VERBOSE,
   'debug!'    => \$DEBUG,
   'man'       => \$man,
   'help|?'    => \$help,
) or pod2usage();

pod2usage(-verbose => 2) if ($man);
pod2usage(-verbose => 1) if ($help);
pod2usage(-msg => 'Please supply a valid directory path.') unless ($path && -d $path);

## 1. get the current annotations for ENA - not all columns required
print "Getting sample metadata from ENA...\n" if $VERBOSE;
my $ENAtmp = 'ENA.tsv';
my $CMD = "wget -q -nH -O $ENAtmp \"$ENAUrl\"";
#print "$CMD\n";
system($CMD) == 0 or die "ERROR - system() failed for '$CMD': $!\nDied";

## 2. now get filenames and paths from CDR. Create mapping of files to samples
print "Parsing $path for files names...\n" if $VERBOSE;
my %mapping;
opendir(my $dh, "$path") or die "ERROR - unable to open directory '$path': $!\nDied";
while (my $entry = readdir($dh)) {
   next if ($entry =~ /^\./);  # skip hidden/special files
   next unless (-d "$path/$entry");
   opendir(my $dh2, "$path/$entry") or die "ERROR - unable to open directory '$path/$entry': $!\nDied";
   while (my $ent2 = readdir($dh2)) {
      next if ($ent2 =~ /^\./);  # skip hidden/special files
      #print "$entry/$ent2\n";
      $mapping{$ent2} = $entry; # retain the sample ID (directory) for each file
   }
   closedir($dh2);
}
closedir($dh);

die "ERROR - expecting 672 filenames\nDied" if (scalar keys %mapping != 672);

## 3. determine correct sample ID for each filename in ENA report
open(my $OUT, ">", $out) or die "ERROR - unable to open '$out': ${!}\nDied";
print $OUT "RunAccession\tLane\tSample\tBiolRep\n";
open(my $fh, "<", $ENAtmp) or die "ERROR - unable to open '$ENAtmp': ${!}\nDied";
while(<$fh>) {
   ## expecting a file like this:
   ##
   ##  run_accession   submitted_ftp
   ##  ERR458493       ftp.sra.ebi.ac.uk/vol1/ERA294/ERA294220/fastq/120903_0219_D0PT7ACXX_1_SA-PE-039.sanfastq.gz
   ##  ERR458494       ftp.sra.ebi.ac.uk/vol1/ERA294/ERA294220/fastq/120903_0219_D0PT7ACXX_2_SA-PE-039.sanfastq.gz
   
   next if (/^run/); # skip header
   chomp();
   my @F = split(/\t/, $_);
   if ($F[1] =~ /(120903_0219_D0PT7ACXX_(\d+)_.*)$/) {
      die "ERROR - file '$F[1]' not found in path '$path'\nDied" unless (exists($mapping{$1}));
      my $num = $mapping{$1};
      if ($num < 49) {
         print $OUT "$F[0]\t$2\tSNF2\t$num\n"
      } else {
         printf $OUT "$F[0]\t$2\tWT\t%d\n", $num-48;
      }
   }
   
}
close($fh);
close($OUT);
unlink($ENAtmp);


=head1 SYNOPSIS

ENA_sample_mapping.pl [--in <path>] [--url <ENA url>] [--out <file>] [--verbose|--no-verbose] [--version] [--debug|--no-debug] [--man] [--help]

=head1 DESCRIPTION

The metadata associated with the yeast RNAseq data at ENA is not informative enough to replicate our sample names. This script generates a more meaningful maaping for uploading to figshare.

=head1 OPTIONS

=over 5

=item B<--in>

Input path to raw fastq files. [default: /cluster/gjb_lab/cdr/GRNAseq/raw/raw_reads]

=item B<--url>

URL generated by ENA for downloading sample metadata file. Only specify if you know what you're doing.

=item B<--out>

Output filename. [default: sample_mapping.tsv]

=item B<--version>

Report version information and exit

=item B<--verbose|--no-verbose>

Toggle verbosity. [default:none]

=item B<--debug|--no-debug>

Toggle debugging output. [default:none]

=item B<--help>

Brief help.

=item B<--man>

Full manpage of program.

=back

=head1 AUTHOR

Chris Cole <christian@cole.name>

=head1 COPYRIGHT

Copyright 2015, Chris Cole. All rights reserved.

This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

=cut
